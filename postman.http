@baseUrl = http://localhost:3000
@token = 
@userId = 
@serviceId = 
@newServiceId = 

### Register User (creates fresh credentials and captures token)
# @name registerUser
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "user{{$timestamp}}@example.com",
  "password": "SecurePass123!",
  "name": "Test User {{$timestamp}}"
}

> {%
try {
  const body = JSON.parse(response.body);
  if (response.status === 201 && body && body.data) {
    if (body.data.token) {
      client.global.set("token", body.data.token);
      client.log("Token stored from registerUser");
    }
    if (body.data.user && body.data.user.id) {
      client.global.set("userId", body.data.user.id);
      client.log(`User ID stored: ${body.data.user.id}`);
    }
  }
} catch (error) {
  client.warn(`registerUser: unable to parse JSON – ${error}`);
}
%}

### Login With Existing Credentials (updates token)
# @name loginUser
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "SecurePass123!"
}

> {%
try {
  const body = JSON.parse(response.body);
  if (response.status === 200 && body && body.data) {
    if (body.data.token) {
      client.global.set("token", body.data.token);
      client.log("Token refreshed from loginUser");
    }
    if (body.data.user && body.data.user.id) {
      client.global.set("userId", body.data.user.id);
      client.log(`User ID stored: ${body.data.user.id}`);
    }
  }
} catch (error) {
  client.warn(`loginUser: unable to parse JSON – ${error}`);
}
%}

### Public Service List (stores the first serviceId when available)
# @name listServices
GET {{baseUrl}}/services?page=1&limit=10&sort=order&order=asc

> {%
try {
  const body = JSON.parse(response.body);
  if (response.status === 200 && body && Array.isArray(body.data) && body.data.length > 0) {
    const firstService = body.data[0];
    if (firstService && firstService.id) {
      client.global.set("serviceId", firstService.id);
      client.log(`serviceId stored: ${firstService.id}`);
    }
  }
} catch (error) {
  client.warn(`listServices: unable to parse JSON – ${error}`);
}
%}

### Public Service Detail (requires serviceId from list)
# @name getService
GET {{baseUrl}}/services/{{serviceId}}

### Create Service (requires token, captures newServiceId)
# @name createService
POST {{baseUrl}}/services
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "{{$guid}} 服務",
  "description": "這是一個示範服務，會在建立後自動保存 ID。",
  "price": 60000,
  "showTime": 120,
  "order": 1,
  "isPublic": true
}

> {%
try {
  const body = JSON.parse(response.body);
  if (response.status === 201 && body && body.data && body.data.id) {
    client.global.set("newServiceId", body.data.id);
    client.log(`newServiceId stored: ${body.data.id}`);
  }
} catch (error) {
  client.warn(`createService: unable to parse JSON – ${error}`);
}
%}

### Update Service (requires token and newServiceId)
# @name updateService
PUT {{baseUrl}}/services/{{newServiceId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "更新後的服務名稱",
  "description": "這是更新後的服務描述，提供更好的功能和體驗。",
  "price": 75000,
  "showTime": 150,
  "order": 2,
  "isPublic": true
}

### Delete Service (soft delete, requires token and newServiceId)
# @name deleteService
DELETE {{baseUrl}}/services/{{newServiceId}}
Authorization: Bearer {{token}}

### Health Check (no auth required)
# @name healthCheck
GET {{baseUrl}}/health
