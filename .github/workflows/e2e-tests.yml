name: E2E Tests with LambdaTest

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Unit and Integration Tests (existing)
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          NODE_ENV: test
          DATABASE_STORAGE: ':memory:'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # Local E2E Tests (without LambdaTest)
  e2e-local:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run local E2E tests
        run: npm run test:e2e:local
        env:
          NODE_ENV: test
          DATABASE_STORAGE: ':memory:'
          API_BASE_URL: 'http://localhost:3000'

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-local-results
          path: |
            e2e-results/
            e2e-report/

  # LambdaTest Cloud E2E Tests
  e2e-lambdatest:
    runs-on: ubuntu-latest
    needs: e2e-local
    # Only run on main branch and scheduled runs to avoid excessive usage
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    strategy:
      matrix:
        browser: [chrome-windows, chrome-macos, firefox-linux, edge-windows]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Build application
        run: npm run build

      - name: Start API server
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: production
          DATABASE_STORAGE: './test-database.sqlite'
          PORT: 3000

      - name: Wait for API to be ready
        run: |
          timeout 30s bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'

      - name: Run E2E tests on LambdaTest
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          USE_LAMBDATEST: true
          LT_USERNAME: ${{ secrets.LT_USERNAME }}
          LT_ACCESS_KEY: ${{ secrets.LT_ACCESS_KEY }}
          API_BASE_URL: 'http://localhost:3000'
          NODE_ENV: test

      - name: Upload LambdaTest E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-lambdatest-${{ matrix.browser }}-results
          path: |
            e2e-results/
            e2e-report/

  # Deploy (only after all tests pass)
  deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-local, e2e-lambdatest]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Add your deployment steps here
          echo "‚úÖ Deployment completed"

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-local, e2e-lambdatest]
    if: always()
    steps:
      - name: Notify test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-local.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed successfully!"
          else
            echo "‚ùå Some tests failed. Please check the logs."
            exit 1
          fi