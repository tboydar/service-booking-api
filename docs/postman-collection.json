{
  "info": {
    "name": "Service Booking API",
    "description": "服務預約管理系統 API 集合\n\n這個集合包含了所有可用的 API 端點，包括認證、服務管理等功能。\n\n## 使用說明\n\n1. 首先執行「註冊用戶」或「用戶登入」來獲取 JWT Token\n2. Token 會自動儲存在環境變數中\n3. 其他需要認證的請求會自動使用這個 Token\n\n## 環境變數\n\n- `baseUrl`: API 基礎 URL (預設: http://localhost:3000)\n- `token`: JWT 認證 Token (自動設定)\n- `userId`: 當前用戶 ID (自動設定)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "service-booking-api"
  },
  "item": [
    {
      "name": "認證 API",
      "item": [
        {
          "name": "註冊用戶",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// 儲存 Token 到環境變數",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('token', jsonData.data.token);",
                  "    pm.environment.set('userId', jsonData.data.user.id);",
                  "    console.log('Token saved:', jsonData.data.token.substring(0, 20) + '...');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"name\": \"{{$randomFullName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "註冊新的用戶帳號\n\n### 請求參數\n- `email`: 電子郵件（必填）\n- `password`: 密碼，至少 6 個字元（必填）\n- `name`: 用戶姓名，2-50 個字元（必填）\n\n### 回應\n- 成功時返回用戶資訊和 JWT Token\n- Token 會自動儲存到環境變數中供後續請求使用"
          }
        },
        {
          "name": "用戶登入",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "// 儲存 Token 到環境變數",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('token', jsonData.data.token);",
                  "    pm.environment.set('userId', jsonData.data.user.id);",
                  "    console.log('Token saved:', jsonData.data.token.substring(0, 20) + '...');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "用戶登入系統\n\n### 請求參數\n- `email`: 註冊時使用的電子郵件（必填）\n- `password`: 密碼（必填）\n\n### 回應\n- 成功時返回用戶資訊和 JWT Token\n- Token 會自動儲存到環境變數中供後續請求使用\n\n### 測試帳號\n- Email: test@example.com\n- Password: SecurePass123!"
          }
        }
      ],
      "description": "用戶認證相關的 API 端點，包括註冊和登入功能。"
    },
    {
      "name": "服務管理 API",
      "item": [
        {
          "name": "查詢服務列表（公開）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "// 檢查分頁資訊",
                  "pm.test(\"Response has pagination info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.pagination) {",
                  "        pm.expect(jsonData.pagination).to.have.property('page');",
                  "        pm.expect(jsonData.pagination).to.have.property('limit');",
                  "        pm.expect(jsonData.pagination).to.have.property('total');",
                  "    }",
                  "});",
                  "",
                  "// 儲存第一個服務的 ID（如果存在）",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.environment.set('serviceId', jsonData.data[0].id);",
                  "    console.log('Service ID saved:', jsonData.data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services?page=1&limit=10&sort=order&order=asc",
              "host": ["{{baseUrl}}"],
              "path": ["services"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "頁碼，從 1 開始"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "每頁筆數，最大 100"
                },
                {
                  "key": "sort",
                  "value": "order",
                  "description": "排序欄位：order, name, price, createdAt"
                },
                {
                  "key": "order",
                  "value": "asc",
                  "description": "排序順序：asc, desc"
                }
              ]
            },
            "description": "查詢所有公開且未刪除的服務項目\n\n### 查詢參數\n- `page`: 頁碼，預設為 1\n- `limit`: 每頁筆數，預設為 10，最大 100\n- `sort`: 排序欄位（order, name, price, createdAt）\n- `order`: 排序順序（asc, desc）\n\n### 特點\n- 不需要認證\n- 只返回公開且未刪除的服務\n- 支援分頁和排序\n- 會自動儲存第一個服務的 ID 供其他請求使用"
          }
        },
        {
          "name": "查詢單一服務（公開）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services/{{serviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{serviceId}}"]
            },
            "description": "查詢指定 ID 的服務詳細資訊\n\n### 路徑參數\n- `id`: 服務 ID（UUID 格式）\n\n### 特點\n- 不需要認證\n- 只能查詢公開且未刪除的服務\n- 使用環境變數中的 serviceId"
          }
        },
        {
          "name": "新增服務（需要認證）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});",
                  "",
                  "// 儲存新建服務的 ID",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('newServiceId', jsonData.data.id);",
                  "    console.log('New service ID saved:', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{$randomProductName}} 服務\",\n  \"description\": \"這是一個專業的 {{$randomProductName}} 服務，提供高品質的解決方案。\",\n  \"price\": {{$randomInt}},\n  \"showTime\": 120,\n  \"order\": 1,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": ["{{baseUrl}}"],
              "path": ["services"]
            },
            "description": "新增一個服務項目\n\n### 認證\n需要有效的 JWT Token\n\n### 請求參數\n- `name`: 服務名稱，1-255 個字元（必填）\n- `description`: 服務描述，最多 1000 個字元（可選）\n- `price`: 價格，非負整數，以分為單位（必填）\n- `showTime`: 顯示時間，非負整數，單位為分鐘（可選）\n- `order`: 排序，非負整數，預設為 0（可選）\n- `isPublic`: 是否公開，布林值，預設為 true（可選）\n\n### 特點\n- 需要認證\n- 會自動儲存新建服務的 ID"
          }
        },
        {
          "name": "更新服務（需要認證）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"更新後的服務名稱\",\n  \"description\": \"這是更新後的服務描述，提供更好的功能和體驗。\",\n  \"price\": 75000,\n  \"showTime\": 150,\n  \"order\": 2,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}"]
            },
            "description": "更新指定 ID 的服務資訊\n\n### 認證\n需要有效的 JWT Token\n\n### 路徑參數\n- `id`: 服務 ID（UUID 格式）\n\n### 請求參數\n所有欄位都是可選的，只更新提供的欄位：\n- `name`: 服務名稱\n- `description`: 服務描述\n- `price`: 價格\n- `showTime`: 顯示時間\n- `order`: 排序\n- `isPublic`: 是否公開\n\n### 特點\n- 需要認證\n- 使用環境變數中的 newServiceId"
          }
        },
        {
          "name": "刪除服務（需要認證）",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}"]
            },
            "description": "軟刪除指定 ID 的服務（設定 isRemove 為 true）\n\n### 認證\n需要有效的 JWT Token\n\n### 路徑參數\n- `id`: 服務 ID（UUID 格式）\n\n### 特點\n- 需要認證\n- 執行軟刪除，不會真正刪除資料\n- 使用環境變數中的 newServiceId"
          }
        }
      ],
      "description": "服務管理相關的 API 端點，包括查詢、新增、更新和刪除服務。"
    },
    {
      "name": "系統狀態 API",
      "item": [
        {
          "name": "健康檢查",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 檢查回應狀態",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 檢查回應格式",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "});",
                  "",
                  "// 檢查系統狀態",
                  "pm.test(\"System is healthy\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "檢查系統健康狀態\n\n### 特點\n- 不需要認證\n- 返回系統運行狀態\n- 包含資料庫連線狀態\n- 包含記憶體使用情況\n- 包含系統運行時間"
          }
        }
      ],
      "description": "系統狀態相關的 API 端點，用於監控系統健康狀態。"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 設定預設的 baseUrl",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:3000');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全域測試：檢查回應時間",
          "pm.test(\"Response time is less than 2000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// 全域測試：檢查 Content-Type",
          "pm.test(\"Content-Type is application/json\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}
