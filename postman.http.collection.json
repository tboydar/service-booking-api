{
  "info": {
    "name": "Service Booking API (HTTP file parity)",
    "description": "Postman collection converted from postman.http\n\nFlow:\n1. Register a new user to obtain credentials (stores token, userId, registeredEmail).\n2. Optionally log in using the freshly registered account or the fixed admin account.\n3. Use the stored token to exercise service CRUD endpoints.\n4. Health check is available without authentication.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000" },
    { "key": "password", "value": "SecurePass123!" },
    { "key": "token", "value": "" },
    { "key": "userId", "value": "" },
    { "key": "registeredEmail", "value": "" },
    { "key": "serviceId", "value": "" },
    { "key": "newServiceId", "value": "" }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "Register and login flows mirroring postman.http",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user{{$timestamp}}@example.com\",\n  \"password\": \"{{password}}\",\n  \"name\": \"Test User {{$timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Success flag is true\", () => pm.expect(jsonData.success).to.be.true);",
                  "if (pm.response.code === 201) {",
                  "  const { token, user } = jsonData.data || {};",
                  "  if (token) pm.collectionVariables.set('token', token);",
                  "  if (user && user.id) pm.collectionVariables.set('userId', user.id);",
                  "  if (user && user.email) pm.collectionVariables.set('registeredEmail', user.email);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login Registered User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Success flag is true\", () => pm.expect(jsonData.success).to.be.true);",
                  "if (pm.response.code === 200) {",
                  "  const { token, user } = jsonData.data || {};",
                  "  if (token) pm.collectionVariables.set('token', token);",
                  "  if (user && user.id) pm.collectionVariables.set('userId', user.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login Fixed Test Account",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"Admin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Success flag is true\", () => pm.expect(jsonData.success).to.be.true);",
                  "if (pm.response.code === 200) {",
                  "  const { token, user } = jsonData.data || {};",
                  "  if (token) pm.collectionVariables.set('token', token);",
                  "  if (user && user.id) pm.collectionVariables.set('userId', user.id);",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Services",
      "description": "Public and authenticated service endpoints",
      "item": [
        {
          "name": "List Services",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/services?page=1&limit=10&sort=order&order=asc",
              "host": ["{{baseUrl}}"],
              "path": ["services"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" },
                { "key": "sort", "value": "order" },
                { "key": "order", "value": "asc" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "  pm.collectionVariables.set('serviceId', jsonData.data[0].id);",
                  "}",
                  "pm.test(\"Response contains data array\", () => pm.expect(jsonData.data).to.be.an('array'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service (Dynamic)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/services/{{serviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{serviceId}}"]
            }
          }
        },
        {
          "name": "Get Service (Fixed)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/services/8e26d37d-975d-4872-8141-2929d169c2e1",
              "host": ["{{baseUrl}}"],
              "path": ["services", "8e26d37d-975d-4872-8141-2929d169c2e1"]
            }
          }
        },
        {
          "name": "Create Service",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{$guid}} 服務\",\n  \"description\": \"這是一個示範服務，會在建立後自動保存 ID。\",\n  \"price\": 60000,\n  \"showTime\": 120,\n  \"order\": 1,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": ["{{baseUrl}}"],
              "path": ["services"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
                  "const jsonData = pm.response.json();",
                  "const newServiceId = jsonData?.data?.id;",
                  "if (newServiceId) {",
                  "  pm.collectionVariables.set('newServiceId', newServiceId);",
                  "  pm.collectionVariables.set('serviceId', newServiceId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service (Created)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}"]
            }
          }
        },
        {
          "name": "Update Service",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"更新後的服務名稱\",\n  \"description\": \"這是更新後的服務描述，提供更好的功能和體驗。\",\n  \"price\": 75000,\n  \"showTime\": 150,\n  \"order\": 2,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}"]
            }
          }
        },
        {
          "name": "Delete Service",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}"]
            }
          }
        },
        {
          "name": "Restore Service",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/{{newServiceId}}/restore",
              "host": ["{{baseUrl}}"],
              "path": ["services", "{{newServiceId}}", "restore"]
            }
          }
        }
      ]
    },
    {
      "name": "System",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ]
}
